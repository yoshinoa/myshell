#!/bin/bash
BASE_URL=YOUR_TRANSMISSION_PUBLIC_DIR
STATE_FILE="$HOME/.local/share/transmission_player_state.json"

mkdir -p "$(dirname "$STATE_FILE")"

urldecode() {
    printf '%b' "${1//%/\\x}"
}

get_state_file() {
    local dir_hash=$(echo "$1" | md5sum | cut -d' ' -f1)
    echo "$HOME/.local/share/transmission_player/state_${dir_hash}.json"
}

save_state() {
    local dir="$1"
    local file="$2"
    local position="$3"
    local state_file=$(get_state_file "$dir")
    mkdir -p "$(dirname "$state_file")"
    echo "{\"directory\":\"$dir\",\"file\":\"$file\",\"position\":$position}" > "$state_file"
}

load_state() {
    local dir="$1"
    local state_file=$(get_state_file "$dir")
    if [[ -f "$state_file" ]]; then
        cat "$state_file"
    else
        echo "{\"directory\":\"$dir\",\"file\":\"\",\"position\":0}"
    fi
}

play_directory() {
    local dir_url="$1"
    local selected_file="$2"
    local socket_path="/tmp/mpvsocket_$$"
    local playlist="$(curl -s "$dir_url/" | grep -oP '(?<=href=")[^"]+' | grep -E '\.(mp4|mkv|avi|webm)$')"
    local start_index=$(( $(echo "$playlist" | grep -n "$selected_file" | cut -d: -f1) - 1 ))
    
    echo "$playlist" | sed "s|^|$dir_url/|" | mpv --playlist=- --playlist-start="$start_index" \
        --save-position-on-quit \
        --input-ipc-server="$socket_path" &
    mpv_pid=$!
    
    while [ ! -S "$socket_path" ]; do
        sleep 0.1
        if ! kill -0 $mpv_pid 2>/dev/null; then
            return 1
        fi
    done

    
    while kill -0 $mpv_pid 2>/dev/null; do
        if [ -S "$socket_path" ]; then
            position=$(echo '{"command":["get_property","time-pos"]}' | socat - "$socket_path" 2>/dev/null | jq -r '.data')
            current_path=$(echo '{"command":["get_property","path"]}' | socat - "$socket_path" 2>/dev/null | jq -r '.data')
            
            
            if [[ -n "$position" && "$position" != "null" && -n "$current_path" && "$current_path" != "null" ]]; then
                file_name="${current_path##*/}"
                save_state "$dir_url" "$file_name" "$position"
            fi
        fi
        sleep 1
    done

    rm -f "$socket_path"
}

navigate_and_play() {
    local current_url="$1"
    local last_state="$(load_state "$current_url")"
    local last_file="$(echo "$last_state" | jq -r '.file')"
    
    while true; do
        SELECTION="$(
            curl -s "$current_url/" | grep -oP '(?<=href=")[^"]+' | while read -r line; do
                decoded="$(urldecode "$line")"
                if [[ "$line" == "$last_file" ]]; then
                    echo -e "\033[33m$decoded\033[0m\t$line"
                else
                    echo -e "$decoded\t$line"
                fi
            done | fzf --ansi --with-nth=1 --delimiter='\t' --preview 'echo {1}' | cut -f2
        )"
        [[ -z "$SELECTION" ]] && exit
        if [[ "$SELECTION" == */ ]]; then
            current_url="${current_url}/${SELECTION%/}"
            # Load the state for the new directory
            last_state="$(load_state "$current_url")"
            last_file="$(echo "$last_state" | jq -r '.file')"
        else
            play_directory "$current_url" "$SELECTION"
            break
        fi
    done
}

command -v jq >/dev/null 2>&1 || { echo "Please install jq"; exit 1; }
command -v socat >/dev/null 2>&1 || { echo "Please install socat"; exit 1; }

navigate_and_play "$BASE_URL"
